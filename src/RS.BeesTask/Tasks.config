<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!--
	监视工作线程计时器设定:
	DelayMillisecond	:	计时器启动延时,该值只有在任务启动时生效，所以在执行中改变配置时将无效。
	WorkingInterval	:	计时器间隔,如果配置更改则下一次会重新载入新的配置
	-->
  <WatchTimer DelayMillisecond="1500">
    <WorkingInterval>00:00:30</WorkingInterval>
  </WatchTimer>

  <!-- 可调用的公共资源 -->
  <Resources>
    <resource name="NetFile" type="Http" value="http://127.0.0.1/{0:yyyyMMdd}.txt" />
    <resource name="LocalFile" type="Local" value="Data\{0:yyyyMMdd}_{1}.txt">
      <Params>
        <add key="encoding" value="gb2312" />
      </Params>
    </resource>/>
    <resource name="RankDb" type="SqlServer" value="Data Source=172.18.194.39;Initial Catalog=DbRank;User ID=sa;Password=sa;App=WST_SG2Rank V1.0" />
    <resource name="GuildDb" type="SqlServer" value="Data Source=172.18.194.39;Initial Catalog=DbGuild;User ID=sa;Password=sa;App=WST_SG2MillionGuild V1.0" />
  </Resources>

  <!--任务配置-->
  <Tasks>

    <!--每5分钟执行一次-->
    <task enable="false" timeTrigger="1 0/5 * * * ? *" type=" CS.SwarmTask.Jobs.Ddns.DdnsJob, CS.SwarmTask">
      <meta id="3" name="DNSPod的DDNS解析"  description="定时更新可能的DDNS解析" />
      <workSetting  timeout="30"  times="0" whenErrorHappened="Default">
        <sleepInterval times="5">00:06:00</sleepInterval>
      </workSetting>
      <extend>
        <Settings>
        </Settings>
      </extend>
    </task>

	<!-- 任务执行组件(实现TaskProvider的类)
	enable:是否可用(执行) 
	timeTrigger:工作时间触发器:只负责启动触发，执行次数不需设在工作触发器里（即符合该表达式的时间内进行有效）：使用Quartz.net的Cron表达式
	type:实现了TaskProvder的Task所在的 组件类型描述：任务类名,dll名 ;
	  -->
    <task enable="true" timeTrigger="0 0/1 * * * ? *" type="CS.TaskScheduling.TaskDemo, CS.SwarmTask.Framwork">	
      <!-- 任务信息 id:任务Id(不重复) ; name:任务名称 ;  isPatch:是否补全 ; description:任务描述;-->
      <meta id="2" name="演示DEMO" isPatch="false"  description="这是一个系统内置的演示DEMO" />
      <!-- 
			任务运行设定
			delaySecond: 任务延时时间，防止同时启动
			timeout:	任务超时时间，秒
			
			times:  times=0 无限制(此时whenErrorHappened参数失效)，
			        times>0 为正确执行的次数(执行完设定次数后才算是正确执行，以后再也不会执行了，除非状态结果中的执行结果被重置)
			whenErrorHappened: times>0时生效，错误时的后续操作:Default忽略异常与失败一直执行直到完成
										Stop任务停止;Sleep休眠后继续执行直到休眠次数到达
      sleepInterval ： 默认暂停为5分钟                    
			-->
     
      <!-- 定义自已的扩展配置，默认的是Pretend的扩展，如果自定义则要自已写 -->
      <extend>
        <Settings>
          <add key="temp" value="tempValue" />
        </Settings>
      </extend>
    </task>


    <task enable="false" timeTrigger="0 0 10 ? * THU,SUN" type="CS.Task.DataTransfer.DataTableToDataTable, CS.Task.DataTransfer" >
      <meta id="1" name="任务名称"  description="01020301我是介绍说明" />
      <workSetting  timeout="30"  times="0" whenErrorHappened="Default">        
        <sleepInterval times="5">00:09:30</sleepInterval>
      </workSetting>
      <extend>
        <Refs>
          <ref name="originDb"  resName="RankDb">
            <Params>
              <add key="Execute" value="SELECT a,b,c,d from Table1  " />
            </Params>
          </ref>
          <ref name="destinationDb"  resName="GuildDb">
            <Params>
              <add key="Prepare" value=" truncate table [DescTable] " />
              <add key="Execute" value=" Insert into [DescTable] ( A, B, C, D)values('{0}',{1},'{2}','{3}') " />
              <!--收尾处理:1.清理可能的最近的数据；2.生成历史-->
              <add key="WindUp" value=" ; set nocount on ; delete from  tTBHistTory where datediff(day,rowtime,getdate()) = 0 ; insert into [tTBHistTory] select a,b,c,d from DescTable  " />
            </Params>
          </ref>
          <!-- 备份是针对目标库来说的 -->
          <ref name="backupToFile" resName ="LocalFile">
            <Params>
              <add key="File1" value =" select a,b,c,d from DescTable " />
              <add key="File2" value =" select top 1000  * from tTBHistTory with(nolock) " />
            </Params>
          </ref>
        </Refs>
        <Settings>
          <add key="temp" value="tempValue" />
        </Settings>
      </extend>
    </task>

  </Tasks>
</configuration>